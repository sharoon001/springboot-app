pipeline{
    agent any
    environment {
	REPOSITORY = credentials('repository')
        IMAGE = "spring-app-dev"
        TAG = "${BUILD_NUMBER}"
        CLUSTER_NAME = 'production-cluster-cluster'
        REGION = 'us-east-2'
        VPN_PIN = credentials('vpn_pin')
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'dev', url: 'https://github.com/sharoon001/springboot-app.git/'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=spring-app \
                    -Dsonar.projectKey=spring-app '''
                }
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
		    sh "sudo docker build -t ${IMAGE} ."
                    sh "aws ecr get-login-password --region ${REGION} | sudo docker login --username AWS --password-stdin ${REPOSITORY}"
                    sh "sudo docker tag ${IMAGE} ${REPOSITORY}/${IMAGE}:${TAG} "
                    sh "sudo docker push ${REPOSITORY}/${IMAGE}:${TAG} "
                    sh "sudo docker tag ${IMAGE} ${REPOSITORY}/${IMAGE}:latest "
                    sh "sudo docker push ${REPOSITORY}/${IMAGE}:latest "
                }
            }
        }
        stage('Install trivy'){
            steps{
                sh "wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb"
                sh "sudo dpkg -i trivy_0.18.3_Linux-64bit.deb"
            }
        }
        stage(' Trivy Scan') {
            steps {
                // Scan again and fail on CRITICAL vulns
                sh 'sudo trivy image ${REPOSITORY}/${IMAGE}:latest'

            }
        }
        stage('Install kubectl'){
            steps{
                sh "curl -LO https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
                sh "sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl"
                sh "kubectl version --client"
            }
        }
        stage('configure EKS'){
            steps{
                sh "aws eks update-kubeconfig --region ${REGION} --name ${CLUSTER_NAME}"
                sh "kubectl get nodes"
            }
        }
        stage('Install helm'){
            steps{
                sh "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
                sh "chmod 700 get_helm.sh"
                sh "./get_helm.sh"
                sh "helm ls -A"
            }
        }
        stage('Deploy helm chart'){
            steps{
                sh "helm upgrade --install spring-app springboot-app-chart -f springboot-app-chart/values-dev.yaml --set image.repository=${REPOSITORY}/${IMAGE} --set image.tag=${TAG} -n dev"
                sh "helm ls -n dev"
            }
        }
    }
}
